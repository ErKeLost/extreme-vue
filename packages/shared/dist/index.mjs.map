{"version":3,"sources":["../src/shapeFlags.ts","../src/toDisplayString.ts","../src/index.ts"],"sourcesContent":["// 组件的类型\r\nexport const enum ShapeFlags {\r\n    // 最后要渲染的 element 类型\r\n    ELEMENT = 1,\r\n    // 组件类型\r\n    STATEFUL_COMPONENT = 1 << 2,\r\n    // vnode 的 children 为 string 类型\r\n    TEXT_CHILDREN = 1 << 3,\r\n    // vnode 的 children 为数组类型\r\n    ARRAY_CHILDREN = 1 << 4,\r\n    // vnode 的 children 为 slots 类型\r\n    SLOTS_CHILDREN = 1 << 5\r\n  }\r\n  ","export const toDisplayString = (val) => {\r\n  return String(val);\r\n};\r\n","export * from \"../src/shapeFlags\";\r\nexport * from \"../src/toDisplayString\";\r\n\r\nexport const isObject = (val) => {\r\n  return val !== null && typeof val === \"object\";\r\n};\r\n\r\nexport const isString = (val) => typeof val === \"string\";\r\n\r\nconst camelizeRE = /-(\\w)/g;\r\n/**\r\n * @private\r\n * 把烤肉串命名方式转换成驼峰命名方式\r\n */\r\nexport const camelize = (str: string): string => {\r\n  return str.replace(camelizeRE, (_, c) => (c ? c.toUpperCase() : \"\"));\r\n};\r\n\r\nexport const extend = Object.assign;\r\n\r\n// 必须是 on+一个大写字母的格式开头\r\nexport const isOn = (key) => /^on[A-Z]/.test(key);\r\n\r\nexport function hasChanged(value, oldValue) {\r\n  return !Object.is(value, oldValue);\r\n}\r\n\r\nexport function hasOwn(val, key) {\r\n  return Object.prototype.hasOwnProperty.call(val, key);\r\n}\r\n\r\n/**\r\n * @private\r\n * 首字母大写\r\n */\r\nexport const capitalize = (str: string) =>\r\n  str.charAt(0).toUpperCase() + str.slice(1);\r\n\r\n/**\r\n * @private\r\n * 添加 on 前缀，并且首字母大写\r\n */\r\nexport const toHandlerKey = (str: string) =>\r\n  str ? `on${capitalize(str)}` : ``;\r\n\r\n// 用来匹配 kebab-case 的情况\r\n// 比如 onTest-event 可以匹配到 T\r\n// 然后取到 T 在前面加一个 - 就可以\r\n// \\BT 就可以匹配到 T 前面是字母的位置\r\nconst hyphenateRE = /\\B([A-Z])/g;\r\n/**\r\n * @private\r\n */\r\nexport const hyphenate = (str: string) =>\r\n  str.replace(hyphenateRE, \"-$1\").toLowerCase();\r\n"],"mappings":";AACO,IAAW,aAAX,kBAAWA,gBAAX;AAEH,EAAAA,wBAAA,aAAU,KAAV;AAEA,EAAAA,wBAAA,wBAAqB,KAArB;AAEA,EAAAA,wBAAA,mBAAgB,KAAhB;AAEA,EAAAA,wBAAA,oBAAiB,MAAjB;AAEA,EAAAA,wBAAA,oBAAiB,MAAjB;AAVc,SAAAA;AAAA,GAAA;;;ACDX,IAAM,kBAAkB,CAAC,QAAQ;AACtC,SAAO,OAAO,GAAG;AACnB;;;ACCO,IAAM,WAAW,CAAC,QAAQ;AAC/B,SAAO,QAAQ,QAAQ,OAAO,QAAQ;AACxC;AAEO,IAAM,WAAW,CAAC,QAAQ,OAAO,QAAQ;AAEhD,IAAM,aAAa;AAKZ,IAAM,WAAW,CAAC,QAAwB;AAC/C,SAAO,IAAI,QAAQ,YAAY,CAAC,GAAG,MAAO,IAAI,EAAE,YAAY,IAAI,EAAG;AACrE;AAEO,IAAM,SAAS,OAAO;AAGtB,IAAM,OAAO,CAAC,QAAQ,WAAW,KAAK,GAAG;AAEzC,SAAS,WAAW,OAAO,UAAU;AAC1C,SAAO,CAAC,OAAO,GAAG,OAAO,QAAQ;AACnC;AAEO,SAAS,OAAO,KAAK,KAAK;AAC/B,SAAO,OAAO,UAAU,eAAe,KAAK,KAAK,GAAG;AACtD;AAMO,IAAM,aAAa,CAAC,QACzB,IAAI,OAAO,CAAC,EAAE,YAAY,IAAI,IAAI,MAAM,CAAC;AAMpC,IAAM,eAAe,CAAC,QAC3B,MAAM,KAAK,WAAW,GAAG,MAAM;AAMjC,IAAM,cAAc;AAIb,IAAM,YAAY,CAAC,QACxB,IAAI,QAAQ,aAAa,KAAK,EAAE,YAAY;","names":["ShapeFlags"]}